import React, { useState } from 'react';
import { Calendar, CheckSquare, MapPin, Home, Plane, ChevronDown, Plus, Trash2, Activity } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

const itinerary = [
  {
    start: 'Oct 2',
    end: 'Oct 10',
    location: 'Washington',
    weather: 'Cool, possible rain',
    airbnbCount: 0,
  },
  {
    start: 'Oct 10',
    end: 'Oct 19',
    location: 'San Francisco',
    weather: 'Mild, foggy mornings',
    airbnbCount: 0,
  },
  {
    start: 'Oct 19',
    end: 'Nov 2',
    location: 'Lima, Peru',
    weather: 'Mild to warm, dry',
    airbnbCount: 1,
  },
  {
    start: 'Nov 2',
    end: 'Dec 7',
    location: 'Buenos Aires',
    weather: 'Warm to hot, possible thunderstorms',
    airbnbCount: 2,
  },
  {
    start: 'Dec 7',
    end: 'Dec 7',
    location: 'Back to California',
    weather: 'Mild',
    airbnbCount: 0,
  },
];

const packingList = {
  'Travel Documents': [
    'Passport',
    'Travel insurance documents',
    'Credit cards',
    'Cash (USD and local currencies)',
  ],
  'Clothing': {
    'General': [
      'T-shirts',
      'Long-sleeve shirts',
      'Pants/jeans',
      'Shorts',
      'Underwear',
      'Socks',
      'Pajamas',
      'Light jacket',
      'Rain jacket',
      'Hat',
    ],
    'Shoes': [
      'Comfortable walking shoes',
      'Dressy shoes',
    ],
    'Swim': [
      'Swimsuit',
    ],
    'Workout': [
      'Workout clothes',
      'Athletic shoes',
    ],
  },
  'Toiletries': [
    'Toothbrush and toothpaste',
    'Shampoo and conditioner',
    'Body wash',
    'Deodorant',
    'Sunscreen',
    'Medications',
    'First aid kit',
  ],
  'Workstation Essentials': [
    'Laptop and charger',
    'Phone and charger',
    'Camera',
    'Travel adapter',
  ],
  'Miscellaneous': [
    'Sunglasses',
    'Books or e-reader',
    'Reusable water bottle',
    'Daypack',
    'Travel pillow',
  ],
};

const travelers = ['Sabrina', 'Zach', 'Lejla'];

export default function Component() {
  const [checkedItems, setCheckedItems] = useState<{ [key: string]: { [key: string]: boolean } }>({});
  const [flightInfo, setFlightInfo] = useState<{ [key: string]: { [key: string]: string } }>({});
  const [airbnbLinks, setAirbnbLinks] = useState<{ [key: string]: string[] }>({});
  const [plannedActivities, setPlannedActivities] = useState<{ activity: string; date: string; link: string }[]>([]);

  const toggleItem = (traveler: string, item: string) => {
    setCheckedItems(prev => ({
      ...prev,
      [traveler]: {
        ...prev[traveler],
        [item]: !prev[traveler]?.[item]
      }
    }));
  };

  const updateFlightInfo = (location: string, traveler: string, value: string) => {
    setFlightInfo(prev => ({
      ...prev,
      [location]: {
        ...prev[location],
        [traveler]: value
      }
    }));
  };

  const updateAirbnbLink = (location: string, index: number, value: string) => {
    setAirbnbLinks(prev => ({
      ...prev,
      [location]: [
        ...(prev[location] || []).slice(0, index),
        value,
        ...(prev[location] || []).slice(index + 1)
      ]
    }));
  };

  const addAirbnbLink = (location: string) => {
    setAirbnbLinks(prev => ({
      ...prev,
      [location]: [...(prev[location] || []), '']
    }));
  };

  const removeAirbnbLink = (location: string, index: number) => {
    setAirbnbLinks(prev => ({
      ...prev,
      [location]: (prev[location] || []).filter((_, i) => i !== index)
    }));
  };

  const addPlannedActivity = () => {
    setPlannedActivities(prev => [...prev, { activity: '', date: '', link: '' }]);
  };

  const updatePlannedActivity = (index: number, field: 'activity' | 'date' | 'link', value: string) => {
    setPlannedActivities(prev => 
      prev.map((activity, i) => 
        i === index ? { ...activity, [field]: value } : activity
      )
    );
  };

  const removePlannedActivity = (index: number) => {
    setPlannedActivities(prev => prev.filter((_, i) => i !== index));
  };

  const renderPackingList = (traveler: string) => {
    return Object.entries(packingList).map(([category, items]) => (
      <div key={category} className="mb-4">
        <h3 className="text-lg font-semibold text-green-800 mb-2">{category}</h3>
        {typeof items === 'object' && !Array.isArray(items) ? (
          Object.entries(items).map(([subCategory, subItems]) => (
            <div key={subCategory} className="ml-4 mb-2">
              <h4 className="text-md font-medium text-green-700 mb-1">{subCategory}</h4>
              {subItems.map((item, index) => (
                <div key={index} className="flex items-center space-x-2 ml-2">
                  <Checkbox
                    id={`item-${traveler}-${category}-${subCategory}-${index}`}
                    checked={checkedItems[traveler]?.[item] || false}
                    onCheckedChange={() => toggleItem(traveler, item)}
                    className="border-green-500 text-green-600"
                  />
                  <Label htmlFor={`item-${traveler}-${category}-${subCategory}-${index}`} className="text-green-800">{item}</Label>
                </div>
              ))}
            </div>
          ))
        ) : (
          (items as string[]).map((item, index) => (
            <div key={index} className="flex items-center space-x-2 ml-2">
              <Checkbox
                id={`item-${traveler}-${category}-${index}`}
                checked={checkedItems[traveler]?.[item] || false}
                onCheckedChange={() => toggleItem(traveler, item)}
                className="border-green-500 text-green-600"
              />
              <Label htmlFor={`item-${traveler}-${category}-${index}`} className="text-green-800">{item}</Label>
            </div>
          ))
        )}
      </div>
    ));
  };

  return (
    <div className="max-w-4xl mx-auto p-4 space-y-8 bg-green-50">
      <h1 className="text-3xl font-bold text-center mb-8 text-green-900">Travel Itinerary</h1>
      
      <div className="space-y-4">
        {itinerary.map((stop, index) => (
          <Card key={index} className="bg-green-100 border-green-300">
            <CardHeader className="bg-green-200">
              <CardTitle className="flex items-center space-x-2 text-green-900">
                <Calendar className="h-5 w-5" />
                <span>{stop.start} - {stop.end}</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="flex items-center space-x-2 text-green-800">
                <MapPin className="h-5 w-5" />
                <span>{stop.location}</span>
              </p>
              <p className="text-sm text-green-700">Weather: {stop.weather}</p>
              
              {stop.airbnbCount > 0 && (
                <div className="space-y-2">
                  <p className="font-semibold flex items-center space-x-2 text-green-800">
                    <Home className="h-5 w-5" />
                    <span>Airbnb Links:</span>
                  </p>
                  {(airbnbLinks[stop.location] || Array(stop.airbnbCount).fill('')).map((link, linkIndex) => (
                    <div key={linkIndex} className="flex items-center space-x-2">
                      <Input
                        value={link}
                        onChange={(e) => updateAirbnbLink(stop.location, linkIndex, e.target.value)}
                        placeholder="Enter Airbnb link"
                        className="flex-1 bg-green-50 border-green-300 text-green-800 placeholder-green-400"
                      />
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => removeAirbnbLink(stop.location, linkIndex)}
                        className="bg-green-200 hover:bg-green-300 text-green-800"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                  <Button
                    variant="outline"
                    onClick={() => addAirbnbLink(stop.location)}
                    className="mt-2 bg-green-200 hover:bg-green-300 text-green-800"
                  >
                    <Plus className="h-4 w-4 mr-2" /> Add Airbnb Link
                  </Button>
                </div>
              )}
              
              <div className="space-y-2">
                <p className="font-semibold flex items-center space-x-2 text-green-800">
                  <Plane className="h-5 w-5" />
                  <span>
                    {index === itinerary.length - 1 ? 'Return Flights:' : 
                     (stop.location === 'San Francisco' ? 'Departing flight to Lima, Peru:' :
                      stop.location === 'Lima, Peru' ? 'Departing flight to Buenos Aires, Argentina:' :
                      'Departure Flights:')}
                  </span>
                </p>
                <div className="ml-7 space-y-2">
                  {travelers.filter(t => !(stop.location === 'Washington' && t === 'Lejla')).map((traveler) => (
                    <div key={traveler} className="flex items-center space-x-2">
                      <Label htmlFor={`flight-${index}-${traveler}`} className="text-green-700 w-20">{traveler}:</Label>
                      <Input
                        id={`flight-${index}-${traveler}`}
                        value={flightInfo[stop.location]?.[traveler] || ''}
                        onChange={(e) => updateFlightInfo(stop.location, traveler, e.target.value)}
                        placeholder="Enter flight details"
                        className="flex-1 bg-green-50 border-green-300 text-green-800 placeholder-green-400"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Card className="bg-green-100 border-green-300">
        <CardHeader className="bg-green-200">
          <CardTitle className="flex items-center space-x-2 text-green-900">
            <Activity className="h-5 w-5" />
            <span>Planned Activities</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {plannedActivities.map((activity, index) => (
            <div key={index} className="space-y-2">
              <div className="flex items-center space-x-2">
                <Input
                  value={activity.activity}
                  onChange={(e) => updatePlannedActivity(index, 'activity', e.target.value)}
                  placeholder="Activity"
                  className="flex-1 bg-green-50 border-green-300 text-green-800 placeholder-green-400"
                />
                <Input
                  value={activity.date}
                  onChange={(e) => updatePlannedActivity(index, 'date', e.target.value)}
                  placeholder="Date"
                  className="flex-1 bg-green-50 border-green-300 text-green-800 placeholder-green-400"
                />
                <Input
                  value={activity.link}
                  onChange={(e) => updatePlannedActivity(index, 'link', e.target.value)}
                  placeholder="Link"
                  className="flex-1 bg-green-50 border-green-300 text-green-800 placeholder-green-400"
                />
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => removePlannedActivity(index)}
                  className="bg-green-200 hover:bg-green-300 text-green-800"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
          <Button
            variant="outline"
            onClick={addPlannedActivity}
            className="mt-2 bg-green-200 hover:bg-green-300 text-green-800"
          >
            <Plus className="h-4 w-4 mr-2" /> Add Planned Activity
          </Button>
        </CardContent>
      </Card>

      {travelers.map((traveler) => (
        <Card key={traveler} className="bg-green-100 border-green-300">
          <CardHeader className="bg-green-200">
            <CardTitle className="flex items-center space-x-2 text-green-900">
              <CheckSquare className="h-5 w-5" />
              <span>{traveler}'s Packing Checklist</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Collapsible>
              <CollapsibleTrigger asChild>
                <Button variant="outline" className="w-full justify-between bg-green-50 text-green-800 hover:bg-green-100 hover:text-green-900">
